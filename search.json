[{"path":"https://www.ahl27.com/CompGenomicsBioc2022/articles/CoevolutionNetworks.html","id":"coevolutionary-analysis","dir":"Articles","previous_headings":"","what":"Coevolutionary Analysis","title":"Building Coevolution Networks with SynExtend","text":"point, ’ve learned generate gene trees set COGs. ’re now ready look signals coevolution, imply functional associations. methods implemented via ProtWeaver class SynExtend, includes many commonly used methods detecting coevolutionary patterns. previous step generated gene trees, ’ve included RData file results generated gene trees COGs dataset. Generating ProtWeaver object simple: ProtWeaver constuctor automatically detects type data adjusts available predictors accordingly. functions best list dendrograms COG, can also run simple presence/absence patterns. See documentation file ProtWeaver information functionality. ’re now ready make predictions. Predicting functional associations done predict.ProtWeaver S3 method. Let’s examine possible functional associations first 100 COGs .","code":"library(DECIPHER) library(SynExtend) datafile <- system.file('extdata', 'treesFromCOGs.RData',                          package='CompGenomicsBioc2022') load(datafile, verbose=TRUE)  pw <- ProtWeaver(treesFromCOGs[1:25]) print(pw) ## a ProtWeaver object with 25 groups and 301 genomes. preds <- predict(pw) print(preds) ## a ProtWeb object. ##  Method used: Ensemble  ##  Number of genes: 25  ##  Number of predictions: 325"},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/articles/CoevolutionNetworks.html","id":"viewing-our-results","dir":"Articles","previous_headings":"","what":"Viewing our results","title":"Building Coevolution Networks with SynExtend","text":"Notice preds ProtWeb object. just simple S3 class pretty print method wrapping matrix pairwise association scores. can get raw data GetProtWebData(): ProtWeb class updated next release cycle include methods, including custom plotting function. current plot.ProtWeb S3 method implements force-directed embedding pairwise scores, ’s big work--progress. Stay tuned next release cycle functionality regarding ProtWeb.","code":"# Subset so the output is actually readable GetProtWebData(preds)[1:7, 1:7] ##           1         2         3         4         5         6         7 ## 1 1.0000000 0.4969302 0.4170682 0.3495290 0.2864437 0.5411136 0.2450071 ## 2 0.4969302 1.0000000 0.3140882 0.3182296 0.2106646 0.4110484 0.2170314 ## 3 0.4170682 0.3140882 1.0000000 0.9998881 0.1305225 0.2478214 0.1369708 ## 4 0.3495290 0.3182296 0.9998881 1.0000000 0.1438377 0.2549658 0.1387738 ## 5 0.2864437 0.2106646 0.1305225 0.1438377 1.0000000 0.2065372 0.1375219 ## 6 0.5411136 0.4110484 0.2478214 0.2549658 0.2065372 1.0000000 0.2037752 ## 7 0.2450071 0.2170314 0.1369708 0.1387738 0.1375219 0.2037752 1.0000000"},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/articles/CoevolutionNetworks.html","id":"methods-implemented-in-protweaver","dir":"Articles","previous_headings":"","what":"Methods Implemented in ProtWeaver","title":"Building Coevolution Networks with SynExtend","text":"default, predict.ProtWeaver makes ensemble prediction using many individual models can run data provided. However, users free use individual models without ensemble predictor. methods implemented following: « 1 2 3 4 5 6 7 »","code":"# PHYLOGENETIC PROFILING METHODS:   ## P/A = Presence/Absence Profiles   ## Jaccard distance of P/A Jaccard <- predict(pw, method='Jaccard')     ## Hamming distance of P/A Hamming <- predict(pw, method='Hamming')     ## MutualInformation of P/A MutualInf <- predict(pw, method='MutualInformation')    ## Direct Coupling Analysis of P/A ProfDCA <- predict(pw, method='ProfDCA')     ## Correlation of gain/loss events on phylogeny, requires Species Tree Behdenna <- predict(pw, method='Behdenna', mySpeciesTree=exSpeciesTree)  # CO-LOCALIZATION METHODS: Colocalization <- predict(pw, method='Coloc') # Co-localization analysis  # DISTANCE MATRIX METHDOS: MirrorTree <- predict(pw, method='MirrorTree') ContextTree <- predict(pw, method='ContextTree')  # Residue Methods: (ONLY AVAILABLE IN DEV VERSION) #   ## MutualInf of residues #ResidueMI <- predict(pw, method='ResidueMI')"},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/articles/CompGenomicsBioc2022.html","id":"comparative-genomics-with-synextend-and-decipher","dir":"Articles","previous_headings":"","what":"Comparative Genomics with SynExtend and DECIPHER","title":"Workshop Overview","text":"Authors: Aidan Lakshman, Nicholas Cooley, Erik S. Wright2.  Last modified: 10 May, 2022.","code":""},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/articles/CompGenomicsBioc2022.html","id":"description","dir":"Articles","previous_headings":"Comparative Genomics with SynExtend and DECIPHER","what":"Description","title":"Workshop Overview","text":"workshop consists interactive, instructor-led demonstration common analyses comparative genomics. immediate goal session use sequence data uncover networks functionally associated genes. networks consist genetic regions shared evolutionary pressure, previously shown imply degree conserved function. analysis useful, overall purpose workshop teach users utilize wide variety tools computational genomics. immediate goal serves convenient mechanism guide instruction set broadly applicable tools can easily repurposed many problems. workshop showcase following functionalities hands-tutorials real data: Reading sequence data R Aligning sequences Phylogenetic reconstruction Identifying coding non-coding regions Annotating gene function Finding clusters orthologous genes (COGs) Predicting functional association COGs analyses conducted entirely within R, achievable using raw sequencing data along DECIPHER SynExtend packages.","code":""},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/articles/CompGenomicsBioc2022.html","id":"prerequisites","dir":"Articles","previous_headings":"Comparative Genomics with SynExtend and DECIPHER","what":"Prerequisites","title":"Workshop Overview","text":"DECIPHER SynExtend developed simple possible end user. , pre-requisites workshop following: Basic knowledge R syntax Basic knowledge genomics data (DNA, RNA, amino acids) Participants can expect fully understand entire workshop qualifications. However, users want dig deeper content covered may find following resources useful reference either workshop: Papers Textbooks Code documentation decipher.codes","code":""},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/articles/CompGenomicsBioc2022.html","id":"participation","dir":"Articles","previous_headings":"Comparative Genomics with SynExtend and DECIPHER","what":"Participation","title":"Workshop Overview","text":"Attendees expected participate following along examples provided workshop. Rather just listening instruction, attendees expected run examples ask questions related either steps workshop related problem scenarios methods applicable .","code":""},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/articles/CompGenomicsBioc2022.html","id":"bioconductor-packages-used","dir":"Articles","previous_headings":"Comparative Genomics with SynExtend and DECIPHER","what":"Bioconductor packages used","title":"Workshop Overview","text":"DECIPHER SynExtend","code":""},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/articles/CompGenomicsBioc2022.html","id":"time-outline","dir":"Articles","previous_headings":"Comparative Genomics with SynExtend and DECIPHER","what":"Time outline","title":"Workshop Overview","text":"Timing estimated may vary depending questions audience.","code":""},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/articles/CompGenomicsBioc2022.html","id":"workshop-goals-and-objectives","dir":"Articles","previous_headings":"Comparative Genomics with SynExtend and DECIPHER","what":"Workshop goals and objectives","title":"Workshop Overview","text":"“big picture” goal workshop enable researchers conduct computational analyses involving genomics data independently wide variety problems. every attendee need identify co-evolving gene clusters, ability conduct analyses like aligning genomes, creating phylogenetic trees, finding shared selective pressure across genomes valuable researcher molecular biology able quickly analyze preliminary data guide experimental hypotheses. conclusion workshop, attendees possess toolkit analyses can apply data. Computational analyses increasingly valuable modern era microbiology, attendees workshop gain sufficient expertise able conduct silico analyses, even don’t deep bioinformatics background.","code":""},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/articles/CompGenomicsBioc2022.html","id":"learning-goals","dir":"Articles","previous_headings":"Comparative Genomics with SynExtend and DECIPHER","what":"Learning goals","title":"Workshop Overview","text":"Describe work visualize sequencing data R Identify methods analyze evolutionary forces genetic regions ???","code":""},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/articles/CompGenomicsBioc2022.html","id":"learning-objectives","dir":"Articles","previous_headings":"Comparative Genomics with SynExtend and DECIPHER","what":"Learning objectives","title":"Workshop Overview","text":"Analyze sequencing data produce experimental hypotheses Generate phylogenetic reconstructions investigate evolutionary history set genomes Mine big genomic data find regions conserved function across organisms       Get Started!","code":""},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/articles/Conclusion.html","id":"thank-you","dir":"Articles","previous_headings":"","what":"Thank you!","title":"Conclusion","text":"’ve made entire tutorial, thank following along! hope series informative useful analyses. code showcased actively worked members lab, especially ProtWeaver ProtWeb functionalities. comments, suggestions, feature requests ProtWeaver, ProtWeb, tutorial, please feel free either email ahl27@pitt.edu open issue GitHub.","code":""},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/articles/Conclusion.html","id":"other-resources","dir":"Articles","previous_headings":"","what":"Other Resources","title":"Conclusion","text":"’re interested learning , lab, phylogenetics, check resources: website Wright Lab Intro Phylogenetics DECIPHER Tutorials « 1 2 3 4 5 6 7 »","code":""},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/articles/ConstructingPhylogenies.html","id":"phylogenetic-reconstruction","dir":"Articles","previous_headings":"","what":"Phylogenetic Reconstruction","title":"Constructing Phylogenies with DECIPHER","text":"’ve now learned find Clusters Orthologous Genes (COGs) set sequences. last thing need final analysis phylogenetic reconstructions gene cluster. step, ’ll build phylogenies COGs using new TreeLine() function introduced latest update DECIPHER. last step, constructed COGs small subset data learn algorithmic flow portion pipeline. Since analyzing entire dataset time-prohibitive workshop, ’ll work pre-calculated RData file containing results gotten run calculation entire dataset. Small note: setup page includes helper function plot phylogenies circular plot. can plot just well plot, just prefer visualization. can also use plottype='unrooted' different visualization, though labels often hard read visualization.  ’s need construct quick phylogenenetic tree R! ’ve set reconstruct=TRUE TreeLine automatically reconstruct ancestral states node. However, TreeLine incorporates wealth functionality past detailed . fact, tree isn’t even best tree can make! Let’s take look new features included TreeLine() function.","code":"library(DECIPHER) source(\"TreeLine.R\") # Shouldn't be necessary if using dev version datafile <- system.file('extdata', 'phyloInputData.RData',                          package='CompGenomicsBioc2022') load(datafile, verbose=TRUE) # Should load 'AlignedSequences' ## Loading objects: ##   AlignedSequences # Helper plotting function plot_tree_unrooted <- function(dend, main, plottype='fan'){   if(require(ape)){     tf <- tempfile()     WriteDendrogram(dend, file=tf, quoteLabels=FALSE)     predTree <- read.tree(tf)     plot(predTree, plottype, main=main)   } else {     plot(dend, main=main)   } }  testSeqs <- AlignedSequences  treeCOG1 <- TreeLine(testSeqs, method='MP', reconstruct=TRUE, verbose=FALSE) plot_tree_unrooted(treeCOG1, main='MP')"},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/articles/ConstructingPhylogenies.html","id":"tree-building-methods","dir":"Articles","previous_headings":"","what":"Tree-Building Methods","title":"Constructing Phylogenies with DECIPHER","text":"first example used method='MP', meaning constructed phyletic tree using Maximum Parsimony method. However, many methods available. TreeLine() implements Maximum Parsimony (MP), Neighbor-Joining (NJ), Ultrametric (complete, single, UPGMA, WPGMA), Maximum Likelihood (ML) methods. different strengths, weaknesses, assumptions. -depth look difference methods outside scope tutorial, recently published another tutorial goes mathematics methods work. Example code :    Maximum-Likelihood trees accurate, also slowest create. method iteratively maximizes likelihood tree given sequence evolution model set aligned sequences. interest time, demo set maxTime argument prevent algorithm taking long.","code":"# Maximum Parsimony treeMP <- TreeLine(myXStringSet=testSeqs, method='MP') plot_tree_unrooted(treeMP, main='MP') # Neighbor-Joining distMatrix <- DistanceMatrix(testSeqs, correction='Jukes-Cantor') treeNJ <- TreeLine(myDistMatrix=distMatrix, method='NJ') plot_tree_unrooted(treeNJ, main='NJ') # UPGMA tree distMatrix <- DistanceMatrix(testSeqs, correction='Jukes-Cantor') treeUltra <- TreeLine(myDistMatrix=distMatrix, method='UPGMA') plot(treeUltra, main='UPGMA') # Maximum Likehood #   - Max runtime is set here to 30sec, default is as long as it takes #   - maxTime expresses time in HOURS, not sec/min #   - Note that method='ML' is the default setting treeML <- TreeLine(testSeqs, maxTime=(30/3600)) plot_tree_unrooted(treeML, main='Maximum-Likelihood')"},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/articles/ConstructingPhylogenies.html","id":"sequence-evolution-models","dir":"Articles","previous_headings":"","what":"Sequence Evolution Models","title":"Constructing Phylogenies with DECIPHER","text":"One question ’re probably asking , “‘given sequence evolution model’?” ’s excellent question–default, TreeLine() test variety sequence evolution models pick one works best data. means shouldn’t typically worry model use. However, wanted explicitly pick certain model? wanted exclude handful models? ’re just curious models even tested? Fret , solution. Models passed TreeLine() list two named entries, $Nucleotide $Protein. look default models tested, simply print MODELS variable included DECIPHER: Nucleotide models include classic names like Jukes-Cantor (JC69) Felsenstein 1981 (F81), well many others. amino acid substitution models contain mixture general models (e.g. BLOSUM62, Dayhoff), well models tailored towards specific organisms (e.g. Q.insect, HIVb). use single model, simply create list matching structure MODELS, just models want include. exclude certain models, copy MODELS remove entries don’t want.","code":"DECIPHER::MODELS ## $Nucleotide ##  [1] \"JC69\"     \"JC69+G4\"  \"K80\"      \"K80+G4\"   \"F81\"      \"F81+G4\"   ##  [7] \"HKY85\"    \"HKY85+G4\" \"T92\"      \"T92+G4\"   \"TN93\"     \"TN93+G4\"  ## [13] \"SYM\"      \"SYM+G4\"   \"GTR\"      \"GTR+G4\"   ##  ## $Protein ##  [1] \"AB\"               \"AB+G4\"            \"BLOSUM62\"         \"BLOSUM62+G4\"      ##  [5] \"cpREV\"            \"cpREV+G4\"         \"cpREV64\"          \"cpREV64+G4\"       ##  [9] \"Dayhoff\"          \"Dayhoff+G4\"       \"DCMut-Dayhoff\"    \"DCMut-Dayhoff+G4\" ## [13] \"DCMut-JTT\"        \"DCMut-JTT+G4\"     \"DEN\"              \"DEN+G4\"           ## [17] \"FLAVI\"            \"FLAVI+G4\"         \"FLU\"              \"FLU+G4\"           ## [21] \"gcpREV\"           \"gcpREV+G4\"        \"HIVb\"             \"HIVb+G4\"          ## [25] \"HIVw\"             \"HIVw+G4\"          \"JTT\"              \"JTT+G4\"           ## [29] \"LG\"               \"LG+G4\"            \"MtArt\"            \"MtArt+G4\"         ## [33] \"mtDeu\"            \"mtDeu+G4\"         \"mtInv\"            \"mtInv+G4\"         ## [37] \"mtMam\"            \"mtMam+G4\"         \"mtMet\"            \"mtMet+G4\"         ## [41] \"mtOrt\"            \"mtOrt+G4\"         \"mtREV\"            \"mtREV+G4\"         ## [45] \"mtVer\"            \"mtVer+G4\"         \"MtZoa\"            \"MtZoa+G4\"         ## [49] \"PMB\"              \"PMB+G4\"           \"Q.bird\"           \"Q.bird+G4\"        ## [53] \"Q.insect\"         \"Q.insect+G4\"      \"Q.LG\"             \"Q.LG+G4\"          ## [57] \"Q.mammal\"         \"Q.mammal+G4\"      \"Q.pfam\"           \"Q.pfam+G4\"        ## [61] \"Q.plant\"          \"Q.plant+G4\"       \"Q.yeast\"          \"Q.yeast+G4\"       ## [65] \"rtREV\"            \"rtREV+G4\"         \"stmtREV\"          \"stmtREV+G4\"       ## [69] \"VT\"               \"VT+G4\"            \"WAG\"              \"WAG+G4\"           ## [73] \"WAGstar\"          \"WAGstar+G4\" # Using a specific set of models mySpecificModel <- list(Nucleotide=c('JC69', 'HKY85')) specTree <- TreeLine(testSeqs, model=mySpecificModel, maxTime=(30/3600)) plot_tree_unrooted(specTree, main='Specific Set ML') # Excluding Specific Models myExcludedModel <- DECIPHER::MODELS myExcludedModel$Protein <- NULL # Remove all protein models myExcludedModel$Nucleotide <- myExcludedModel$Nucleotide[-1] # Remove JC69 exclTree <- TreeLine(testSeqs, model=myExcludedModel, maxTime=(30/3600)) plot_tree_unrooted(exclTree, main='Excluded Set ML')"},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/articles/ConstructingPhylogenies.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Constructing Phylogenies with DECIPHER","text":"’s need know generate phylogenies dataset. order conduct final coevolutionary analysis, ’re going need build gene tree COGs. ’ve precomputed trees us, can load next step without worry long runtimes. parameters didn’t mention writeup. significant one use reconstruct=TRUE, reconstructs ancestral states (important later analyses). also additional arguments multiprocessing (processors=1), using Laguerre quadrature likelihoods (quadrature=T/F), switching type information criterion ML trees (informationCriterion=c('AICc', 'BIC')), many others. See documentation page information –now, ’ll continue final goal. « 1 2 3 4 5 6 7 »","code":""},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/articles/FindingCOGs.html","id":"building-our-dataset","dir":"Articles","previous_headings":"","what":"Building Our Dataset","title":"Finding COGs with SynExtend","text":"can get looking COGs, first need dataset use. ’ll using real Cyanobacteria genomes taken NCBI. ’ve selected 5 genomes work due relatively small size since limited time workshop. However, complete data available , welcome try analyses genomes time! code section work larger datasets, may just wait little .","code":"library(DECIPHER) library(SynExtend) COGExampleDir <- system.file('extdata', 'COGex', package='CompGenomicsBioc2022')  # We're going to be using the database API for DECIPHER since this is designed for # larger scale analyses. See code below for how we do this! DBPATH <- tempfile()  genomedirs <- dir(COGExampleDir, full.names = TRUE)  # Initializing our GeneCalls list GeneCalls <- vector('list', length=length(genomedirs))  for (i in seq_along(genomedirs)){   subfiles <- list.files(genomedirs[i], full.names = TRUE)      # Find the FASTA file and the GFF annotations file   fna_file <- subfiles[which(grepl('.*fna$', subfiles))]   gff_file <- subfiles[which(grepl('.*gff$', subfiles))]      # Read in sequence to database   Seqs2DB(seqs = fna_file,           type = \"FASTA\",           dbFile = DBPATH,           identifier = as.character(i), # Sequences must be identified by number           verbose = TRUE)      # Read in annotations   GeneCalls[[i]] <- gffToDataFrame(GFF = gff_file,                                     Verbose = TRUE) } names(GeneCalls) <- seq_along(GeneCalls) # Must have number IDs here too"},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/articles/FindingCOGs.html","id":"finding-orthologous-pairs","dir":"Articles","previous_headings":"","what":"Finding Orthologous Pairs","title":"Finding COGs with SynExtend","text":"Now data read successfully. Next, ’ll find pairs orthologous genes. accomplished means NucleotideOverlap() PairSummaries() functions SynExtend. NucleotideOverlap() uses Synteny object determines genomic features connected syntenic hits. PairSummaries determines pairs genes orthologous parsing connected regions. Note: Several methods commented . save time within workshop, since lot cover relatively short time. Running output PairSummaries() BlockExpansion() BlockReconciliation() improves accuracy final identified orthologous regions cost runtime. encourage readers try functionality absence tight time constraints.","code":"Syn <- FindSynteny(dbFile = DBPATH,                    verbose = TRUE,                    processors = NULL)  Overlaps <- NucleotideOverlap(SyntenyObject = Syn,                                GeneCalls = GeneCalls,                                LimitIndex = FALSE,                                AcceptContigNames = TRUE,                                Verbose = TRUE) head(Overlaps) ##   1             2             3             4             5             ## 1 1751080       integer,6072  integer,5357  integer,12067 integer,5786  ## 2 integer,29007 2593857       integer,7436  integer,10670 integer,9933  ## 3 integer,25506 integer,35964 1443806       integer,5104  integer,10054 ## 4 integer,53802 integer,49419 integer,25182 3342364       integer,7150  ## 5 integer,26694 integer,47916 integer,59661 integer,32130 2794318 Pairs <- PairSummaries(SyntenyLinks = Overlaps,                      GeneCalls = GeneCalls,                      DBPATH = DBPATH,                      PIDs = FALSE, # Set to TRUE for better accuracy (slower)                       Score = FALSE, # Set to TRUE for better accuracy (slower)                      Verbose = TRUE)  # These methods only work if we set PIDs and Score to TRUE # Unfortunately we don't have time in this workshop to use these # Feel free to try them out on your own with a larger dataset!  # P02 <- BlockExpansion(Pairs = P01, #                       DBPATH = DBPATH, #                       Verbose = TRUE, #                       NewPairsOnly = FALSE) # P03 <- BlockReconciliation(Pairs = P02, #                            PIDThreshold = 0.75, #                            SCOREThreshold = 200, #                            Verbose = TRUE) # Pairs <- P03[P03$PID > 0.4, ] head(Pairs) ##      p1       p2 ExactMatch Consensus TotalKmers MaxKmer p1FeatureLength ## 1 1_1_1 2_1_2393          3 0.9751676          1       3            1158 ## 2 1_1_1 2_1_2394        149 0.9952341          5      33            1158 ## 3 1_1_3 2_1_1715        699 0.9944594         15     132            2406 ## 4 1_1_4 2_1_1716         62 0.9996400          2      38            1458 ## 5 1_1_5 2_1_1395        119 0.9973530          4      38            2487 ## 6 1_1_5 2_1_1648        152 0.9831189          6      36            2487 ##   p2FeatureLength Adjacent    TetDist PIDType PredictedPID ## 1             633        0 0.08269544      AA    0.3212880 ## 2            1113        0 0.07577384      AA    0.5203286 ## 3            2286        1 0.07529888      AA    0.5164381 ## 4            1449        1 0.07442340      AA    0.3365680 ## 5            2562        0 0.08291266      AA    0.2642923 ## 6            2400        0 0.08862774      AA    0.3245199"},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/articles/FindingCOGs.html","id":"finding-cogs","dir":"Articles","previous_headings":"","what":"Finding COGs","title":"Finding COGs with SynExtend","text":"pairwise orthologous regions, can finally determine COGs using DisjointSet() function SynExtend. function analyzes pairs find determine orthologs (dis)connected. Future work look smarter ways determine COGs pairwise orthologies, analysis already highly accurate. also use ExtractBy pull sequences corresponding genomic region COG.","code":"COGSets <- DisjointSet(Pairs = Pairs,                         Verbose = TRUE)  # Extract sequences for COGs with orthologs in at least 5 (all) genomes Sequences <- ExtractBy(x = Pairs,                        y = DBPATH,                        z = COGSets[lengths(COGSets) == 5],                        Verbose = TRUE)  # These come back in different orders, so let's match them up allnames <- lapply(Sequences, names) COGMapping <- sapply(COGSets, \\(x){   which(sapply(allnames, \\(y) setequal(x,y))) }) COGMapping <- COGMapping[sapply(COGMapping, \\(x) length(x) > 0)]  MatchedCOGSets <- COGSets[names(COGMapping)] MatchedSequences <- Sequences[unlist(COGMapping)] names(MatchedSequences) <- names(COGMapping) MatchedCOGSets[1:3] ## $`5` ## [1] \"1_1_8\"    \"2_1_805\"  \"3_1_529\"  \"4_1_2332\" \"5_1_1696\" ##  ## $`6` ## [1] \"1_1_9\"    \"3_1_530\"  \"2_1_804\"  \"4_1_2331\" \"5_1_1695\" ##  ## $`7` ## [1] \"1_1_10\"   \"2_1_945\"  \"3_1_843\"  \"4_1_2330\" \"5_1_305\" MatchedSequences[1:3] ## $`5` ## DNAStringSet object of length 5: ##     width seq                                               names                ## [1]   750 TTGGTCCAGTCCTCTCCTAGACA...CTTCATTAACTAAAAAAACTTAA 1_1_8 ## [2]   681 GTGCTGCACCGATGCCAACAAGC...CTGCCACTGCTCCGGTGCCCTAG 2_1_805 ## [3]   753 GTGCTGCAGCACTTTCAACAAGA...CTTTAAAAAATGTTGATAATTAA 3_1_529 ## [4]   732 TTGGTCCCATCCAGTAGTCCCAG...TGCGCGCCCCCCAACCCTCCTGA 4_1_2332 ## [5]   744 GTGCTTCAACGCTTCAAGCAAGA...CGACGGAAGACGAAAAGATATGA 5_1_1696 ##  ## $`6` ## DNAStringSet object of length 5: ##     width seq                                               names                ## [1]   636 ATGGAATCTAGATCTCTTGCTAG...CTCCTTCACATAATACTATTTAA 1_1_9 ## [2]   639 ATGATTACTGCTCGTCGTGTTGC...CTCAGGCAGCCACCGGTAACTGA 2_1_804 ## [3]   651 ATGACTTCTCGTCAACAACCTCG...AAAAAGATGAATGTCTTCTTTAA 3_1_530 ## [4]   627 ATGCAGAGTCGCACCCTTGCCCG...GCTTCACCGCCGCCCGGGTCTGA 4_1_2331 ## [5]   651 ATGCATTTTAACCAGAAACCTCG...TGAGCCCTAAAGACCCCACCTGA 5_1_1695 ##  ## $`7` ## DNAStringSet object of length 5: ##     width seq                                               names                ## [1]  1296 ATGCAAGAACAAAAAGACAACAG...AAGCTTTGCTAGCAGATTCATGA 1_1_10 ## [2]  1377 ATGGTTTTTAATTGGTTTCGACG...GTGATGCGGAGGTTGCAGCATGA 2_1_945 ## [3]  1308 ATGTCCAATTGGCCTAATGATCA...TAGAAGCTTTATTAGATGAGTAA 3_1_843 ## [4]  1563 ATGGTCTTCGATTGGTTCAAACG...TCGAGGCCCTGCTCGCCTCCTGA 4_1_2330 ## [5]  1509 ATGTTTAATTGGTTTTACAGTAA...TAGAGGCCTTACTCAATACTTAA 5_1_305"},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/articles/FindingCOGs.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Finding COGs with SynExtend","text":"Now know generate COGs dataset genomes gene calls. also generated gene calls , high quality gene annotations already available (e.g. NCBI), makes sense use . Remember example intentionally small can fit workshop within time constraints–highly encourage experimenting , larger datasets! « 1 2 3 4 5 6 7 »","code":""},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/articles/GeneCallingAnnotation.html","id":"gene-calling-and-annotation","dir":"Articles","previous_headings":"","what":"Gene Calling and Annotation","title":"Gene Calling and Annotation with DECIPHER","text":"point, ’ve learned read genomic data, gained basic familiarity working . next step pipeline take set genomes, identify coding regions , predict function many genetic regions can. ’ll start identifying genes .","code":""},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/articles/GeneCallingAnnotation.html","id":"finding-genes","dir":"Articles","previous_headings":"","what":"Finding Genes","title":"Gene Calling and Annotation with DECIPHER","text":"interest time, ’re going using plasmid sequences dataset Archaeal genomes. Plasmids small enough can quickly execute queries. ’ll begin reading data .fasta file, previous section. Next, ’re going identify genes first sequence sequence set. ’ll mark ‘genome’ (although ’s really plasmid), predict genes within using FindGenes() DECIPHER package. FindGenes() returns Genes object information genes start end genome. can extract sequences corresponding gene using ExtractGenes() function.","code":"library(DECIPHER) source(\"TreeLine.R\") # Shouldn't be necessary if using dev version datafile <- system.file('extdata', 'EX_plasmids.fasta',                          package='CompGenomicsBioc2022') seqs <- readDNAStringSet(datafile) genome <- seqs[1] geneLocs <- FindGenes(genome) genes <- ExtractGenes(geneLocs, genome) # `Genes` object geneLocs ## Genes object of size 57 specifying: ## 57 protein coding genes from 102 to 2,934 nucleotides. ##  ##   Index Strand Begin  End TotalScore ... Gene ## 1     1      0   188 1033     141.59 ...    1 ## 2     1      0  1039 1458      66.13 ...    1 ## 3     1      1  1736 2416      83.66 ...    1 ## 4     1      1  3028 4194     116.60 ...    1 ## 5     1      1  4219 4857      83.56 ...    1 ## 6     1      1  4926 5789      79.25 ...    1 ## ... with 51 more rows. # Sequences corresponding to each gene genes ## DNAStringSet object of length 57: ##      width seq ##  [1]   846 ATGGCACGAACGATTTCATACACGGTCTACAGC...ATTACACGCGAAACGCGGGGTGTTGAGGTATGA ##  [2]   420 ATGAAGTCCGGTGCTGGCGAGGATCCATGGGAC...GAAGACAAGCACGAAGGCGACTCGCTGCTCTAG ##  [3]   681 ATGCGGTCGCAGCGACGTCGTCGTCAGCAGCGT...GACGAGAACAGCAAGGAATCCAGCGACGATTAA ##  [4]  1167 GTGTCTACGACCCAGCAAGCAGACAGTGAGATT...AATCGGCCACCTGACGACCGGTTCCACCGGTAG ##  [5]   639 ATGCCGGGAATCGGACAGACAGTTAAAAATGCC...GTTGAAGGATCAGTACATCACAAAGCCGCTTAG ##  ...   ... ... ## [53]  1068 ATGACCGATGCTAGCGCCGTCGACGACCACCGC...GTCGCCCCCGTGGTGCCCGCGAATTCCAGCTAA ## [54]   465 ATGAAGAAGGTTACACTTGAGATTCCGGACCGA...GAGGAAGTCACGCTGGACAACCAGGCGACCTAA ## [55]   798 ATGGCCCTCCCTACACCACAAGCGCTCGCCCGA...GCGCGGGTGTTGCTTCCTGCGCAGCGGATGTAG ## [56]  1137 ATGTCTGAGACCAACGCTACCCCTGGGGTTCGC...AAGGTCCGGTATAGCAGCACCGACGAGGAATAA ## [57]   252 ATGGAAGTCCCACAGCGAGCCTCTATACCCCAC...TTCAACGCGTGGAAGCGTGATTTAGATGTCTGA"},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/articles/GeneCallingAnnotation.html","id":"removing-non-coding-regions","dir":"Articles","previous_headings":"","what":"Removing Non-Coding Regions","title":"Gene Calling and Annotation with DECIPHER","text":"FindGenes() finds genes , may encode coding regions. ’re interested regions actually translated proteins, since ’ll try annotate later. , ’ll use FindNonCoding() function. FindNonCoding() used three main datafiles depending data analyze: data(\"NonCodingRNA_Archaea\") Archaeal data data(\"NonCodingRNA_Bacteria\") Bacterial data data(\"NonCodingRNA_Eukarya\") Eukaryotic data include pretrained models common non-coding patterns relevant domain life. pretrained models insuffient, can train dataset using LearnNonCoding() (though outside scope workshop). ’ve run FindNonCoding(), can use ExtractGenes() pull coding regions. example, ’ll using complete Archaeal genome taken NCBI GenBank.","code":"datafile <- system.file('extdata', 'EX_archaealGenome.RData',                          package='CompGenomicsBioc2022') load(datafile) #loads in a complete Archaeal genome as `archaealGenome`  data(\"NonCodingRNA_Archaea\") ncRNA <- NonCodingRNA_Archaea  geneticRegions <- FindNonCoding(ncRNA, archaealGenome)  ## Find annotations  annotations <- attr(geneticRegions, \"annotations\") geneMatches <- match(geneticRegions[,\"Gene\"], annotations) annots <- sort(table(names(annotations)[geneMatches]))  # Find Genes genes <- FindGenes(archaealGenome, includeGenes=geneticRegions) # What genes have we found and successfully annotated? annots ##  ##  RNase_P-RF00373 rRNA_16S-RF01959 rRNA_23S-RF02540  rRNA_5S-RF00001  ##                1                1                1                1  ##      SRP-RF01857         tRNA-Asp         tRNA-His         tRNA-Met  ##                1                1                1                1  ##         tRNA-Phe         tRNA-Thr         tRNA-Tyr         tRNA-Gln  ##                1                1                1                2  ##         tRNA-Ile         tRNA-Pro         tRNA-Ala         tRNA-Arg  ##                2                2                3                3  ##         tRNA-Cys         tRNA-Glu         tRNA-Gly         tRNA-Val  ##                3                3                3                3  ##         tRNA-Lys         tRNA-Leu         tRNA-Ser  ##                4                5                7 # Genes in the genome genes ## Genes object of size 2,841 specifying: ## 2,790 protein coding genes from 84 to 4,932 nucleotides. ## 51 non-coding RNAs from 74 to 3,037 nucleotides. ##  ##   Index Strand Begin  End TotalScore ... Gene ## 1     1      1    83  400      40.38 ...    1 ## 2     1      0   647 1159      55.61 ...    1 ## 3     1      0  1294 1710      46.27 ...    1 ## 4     1      1  1685 2917     126.08 ...    1 ## 5     1      0  2992 3552      55.05 ...    1 ## 6     1      1  3533 4306      95.42 ...    1 ## ... with 2,835 more rows. # Find sequences corresponding to found genes geneSeqs <- ExtractGenes(genes, archaealGenome, type=\"DNAStringSet\") geneSeqs ## DNAStringSet object of length 2841: ##        width seq ##    [1]   318 ATGAAAATAGTCCTTTCAGTCGATTCTGAGGA...TACAAGAAGGATATATTTACTTAGTACTATAA ##    [2]   513 ATGGAGGAAAAGCTAACTTCTCCCAAAATTGA...TCACACTATCTGAAGTGAAGAAGTTAAAGTAA ##    [3]   417 ATGAAGGTTGTAAAATATTACGTTGATGTTAA...AAGAAGCTAAGACTTCAGGAAGTTCTCAGTAA ##    [4]  1233 ATGATTCTCGGTGTATTAGGCTCAGACAAGCT...TCTCAGTTACTGAGAACTTCCTGAAGTCTTAG ##    [5]   561 ATGTGTCTAGGTTTAATACTTGACATAATCTT...AGTCTACAAGGACTAGGCACTTCTACTATTGA ##    ...   ... ... ## [2837]   225 ATGAAGATAGTGAGGGTAGGAAAAAGGAATGC...AAATTAGCAAATCTCTCGGAATTAATAGTTGA ## [2838]   936 ATTTCCTCGTATTCCATTGCTGTATATAAAGG...ACCAGTGTTTATCCCCAGGAAAATCCTTGTGA ## [2839]   132 ATGAAGATAGTGAGGGTAGGAAAAAGGAATGC...TAAAAGACGGCAAAATAGAACTCATAGCCTGA ## [2840]   357 ATGATAATAAGTAAGAAAATAACCTCAATTGA...AAGACATAGTAAAGGTATACCTAACTAACTAG ## [2841]   228 TTGGGAAATGAATTTGCTAACAAGCAATTATA...GGGAGAGAAGATTTTCATCGATACAAACATGA"},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/articles/GeneCallingAnnotation.html","id":"classification-with-idtaxa","dir":"Articles","previous_headings":"","what":"Classification with IDTAXA","title":"Gene Calling and Annotation with DECIPHER","text":"now set coding regions. last step section try annotate function. functionality done IdTaxa() DECIPHER package. first need train classifier using LearnTaxa(), can use IdTaxa set sequences try assign function . ’ve finished calculating, can either view annotations directly, plot taxonomy.  « 1 2 3 4 5 6 7 »","code":"# Reusing this datafile datafile <- system.file('extdata', 'EX_Strepto_COG.fasta',                          package='CompGenomicsBioc2022') cogSeqs <- readDNAStringSet(datafile)   # Load Training File data(\"TrainingSet_16S\")  # Remove gaps cogSeqs <- RemoveGaps(cogSeqs)  # Classify! ids <- IdTaxa(cogSeqs, TrainingSet_16S) ids ##   A test set of class 'Taxa' with length 113 ##       confidence name                 taxon ##   [1]        15% 55                   Root; unclassified_Root                    ##   [2]        16% 12664                Root; unclassified_Root                    ##   [3]        15% 83844                Root; unclassified_Root                    ##   [4]        15% 99294                Root; unclassified_Root                    ##   [5]        15% 106117               Root; unclassified_Root                    ##   ...        ... ...                  ... ## [109]        15% 2089915              Root; unclassified_Root                    ## [110]        15% 2107888              Root; unclassified_Root                    ## [111]        14% 2123429              Root; unclassified_Root                    ## [112]        15% 2146854              Root; unclassified_Root                    ## [113]        19% 2172235              Root; unclassified_Root plot(ids, TrainingSet_16S)"},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/articles/LoadingGenomeData.html","id":"reading-in-sequencing-data","dir":"Articles","previous_headings":"","what":"Reading in Sequencing Data","title":"Loading in Genome Data with DECIPHER","text":"order work sequencing data, first get R format allows us work . commonly used format genomic data XString XStringSet classes, available Biostrings package. XStrings come 4 distinct flavors, depending characters allowed: DNAString, DNA data (ATGC, plus gaps ambiguity codes) RNAString, RNA data (AUGC, plus gaps ambiguity codes) AAString, amino acid data (20 amino acids plus ambiguity codes, U, O, unknown/gaps) BString, combination letters XString objects type combined, become XStringSet. provides easy way store work genomics data. example manually creating XStringSet: Manually typing sequences obviously isn’t great system. sequencing data downloadable .fasta .fastq files, let’s look realistic use-case reads data .fasta. ’re going using example set 50 complete Streptomyces genomes obtained NCBI GenBank. can’t find FASTA file, can download Setup page. Success! Now large example dataset work . wanted visualize sequences, can open web browser using BrowseSeqs() DECIPHER:","code":"library(DECIPHER) # Auto-imports Biostrings sequences <- c('AGACT',                'AGACG',                'TCATT',                'TGCTG',                'AGCTG')  sequenceSet <- DNAStringSet(sequences) sequenceSet ## DNAStringSet object of length 5: ##     width seq ## [1]     5 AGACT ## [2]     5 AGACG ## [3]     5 TCATT ## [4]     5 TGCTG ## [5]     5 AGCTG # This datafile is available from materials on the Setup page exampledata <- load('EX_Strepto_COG.fasta')  # note that we can also use format='fastq' for FASTQ datasets exStringSet <- readDNAStringSet(exampledata, format=\"fasta\") BrowseSeqs(exStringSet)"},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/articles/LoadingGenomeData.html","id":"aligning-sequences","dir":"Articles","previous_headings":"","what":"Aligning Sequences","title":"Loading in Genome Data with DECIPHER","text":"Now sequences, let’s explore ways can manipulate . complete demo Biostrings outside scope workshop, ’ll just focus functionality added via DECIPHER. common analysis bioinformatics aligning sequences. easily achievable either AlignSeqs() function AlignTranslation() functions DECIPHER. AlignTranslation() aligns sequences based translated amino acid sequences, significantly accurate coding sequences. code block also use RemoveGaps() DECIPHER remove gaps shared sequences, effort make R printout little informative. Alignments tend start lot gaps, result viewing R isn’t always super informative. , can visualize alignment much better way using BrowseSeqs(): « 1 2 3 4 5 6 7 »","code":"# Align the sequences aliNoTranslate <- AlignSeqs(exStringSet, verbose=FALSE)  # Aligning using translated amino acid sequences aliTranslate <- AlignTranslation(exStringSet, verbose=FALSE) BrowseSeqs(aliTranslate)"},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/articles/Setup.html","id":"setting-up-your-environment","dir":"Articles","previous_headings":"","what":"Setting up your environment","title":"Setup","text":"tutorial depends key packages work correctly. page outline install necessary components workshop. ’re attending tutorial Bioconductor 2022, can skip directly next page.","code":""},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/articles/Setup.html","id":"prerequisites","dir":"Articles","previous_headings":"Setting up your environment","what":"Prerequisites","title":"Setup","text":"content shown using R programming language. existing users, note version R must least version 4.x.x compatibility packages ’ll using. also recommend using RStudio development environment, since ’s excellent IDE tons features. step totally optional; feel free use whatever development environment prefer.","code":""},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/articles/Setup.html","id":"installing-packages","dir":"Articles","previous_headings":"Setting up your environment","what":"Installing packages","title":"Setup","text":"workshop depends two main packages: DECIPHER SynExtend. installed via Bioconductor, package manager open source bioinformatics projects R.","code":"if (!require(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  BiocManager::install('DECIPHER') BiocManager::install('SynExtend')"},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/articles/Setup.html","id":"downloading-data","dir":"Articles","previous_headings":"Setting up your environment","what":"Downloading Data","title":"Setup","text":"Click button download datafiles used workshop.         « 1 2 3 4 5 6 7 »","code":""},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Aidan Lakshman. Author, maintainer.","code":""},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lakshman (2022). CompGenomicsBioc2022: Comparative Genomics Analyses SynExtend DECIPHER. R package version 2.0.0, https://www.ahl27.com/CompGenomicsBioc2022/.","code":"@Manual{,   title = {CompGenomicsBioc2022: Comparative Genomics Analyses with SynExtend and DECIPHER},   author = {Aidan Lakshman},   year = {2022},   note = {R package version 2.0.0},   url = {https://www.ahl27.com/CompGenomicsBioc2022/}, }"},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/index.html","id":"using-the-synextend-decipher-pipeline-for-genomic-analysis","dir":"","previous_headings":"","what":"Comparative Genomics with SynExtend and DECIPHER","title":"Comparative Genomics with SynExtend and DECIPHER","text":"SynExtend DECIPHER packages R incorporate wealth easy use functions comparative genomics analyses. interactive tutorial series introduce users packages walking complete workflow identifying co-evolving genes dataset genome sequences. webpage created presentation Bioconductor 2022, content freely available forever. ’ve summarized page skills can expect learn working tutorials site. See Overview page information, along code examples can run ! (Note: ’m still working tutorials. Code currently operational, many toy examples random datasets. final version incorporate consistent dataset entire workshop, well meaningful conclusions. Check Changelog latest updates).","code":""},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/index.html","id":"topics-covered","dir":"","previous_headings":"","what":"Topics Covered","title":"Comparative Genomics with SynExtend and DECIPHER","text":" ","code":""},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/index.html","id":"loading-genome-data-with-decipher","dir":"","previous_headings":"Topics Covered","what":"Loading Genome Data with DECIPHER","title":"Comparative Genomics with SynExtend and DECIPHER","text":"first step analyzing genomics data loading data . download sequencing data NCBI .fasta, load R, perform basic operations data. Users learn efficiently work large scale genomics data, including visualization alignment sequencing data. Function Reference","code":""},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/index.html","id":"gene-calling-and-annotation-with-decipher","dir":"","previous_headings":"Topics Covered","what":"Gene Calling and Annotation with DECIPHER","title":"Comparative Genomics with SynExtend and DECIPHER","text":"natural next step identifying elements comprise genome dataset. Users learn programmatically identify coding non-coding regions genomes, annotate predicted KEGG orthology groups using IDTAXA. Function Reference","code":""},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/index.html","id":"annotation-of-cogs-with-synextend","dir":"","previous_headings":"Topics Covered","what":"Annotation of COGs with SynExtend","title":"Comparative Genomics with SynExtend and DECIPHER","text":"Annotated genetic regions can mapped across organisms clusters orthologous genes (COGs). Users learn identify COGs scale using data generated previous step. Function Reference","code":""},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/index.html","id":"constructing-gene-trees-with-decipher","dir":"","previous_headings":"Topics Covered","what":"Constructing Gene Trees with DECIPHER","title":"Comparative Genomics with SynExtend and DECIPHER","text":"COG comprises sets conserved orthologs across species. data, combined sequencing data ortholog, allow us reconstruct evolutionary history COG. Users learn construct, visualize, save phylogenetic trees sets genomes using TreeLine() function. Function Reference","code":""},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/index.html","id":"identifying-co-evolving-gene-collectives-with-synextend","dir":"","previous_headings":"Topics Covered","what":"Identifying Co-evolving Gene Collectives with SynExtend","title":"Comparative Genomics with SynExtend and DECIPHER","text":"data, can analyze patterns evolutionary signal across COGs. Co-evolutionary signal genes implies functional association, finding COGs shared selective pressure aids us uncovering mechanisms intracellular pathways. Users learn use ProtWeaver class tease subtle evidence correlated evolutionary pressure order create co-evolutionary networks. Function Reference","code":""},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/index.html","id":"conclusion","dir":"","previous_headings":"Topics Covered","what":"Conclusion","title":"Comparative Genomics with SynExtend and DECIPHER","text":"conclusion workshop, users able perform following tasks R: Visualize sequence data Identify annotate genes sequence data Identify COGs set gene calls Build phylogenies species gene level Predict COGs shared evolutionary pressure","code":""},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/index.html","id":"useful-links","dir":"","previous_headings":"Topics Covered","what":"Useful Links","title":"Comparative Genomics with SynExtend and DECIPHER","text":"DECIPHER SynExtend Related Tutorials Lab!          work licensed Creative Commons Attribution-ShareAlike 4.0 International License.","code":""},{"path":[]},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/news/index.html","id":"general-notes-1-1-0","dir":"Changelog","previous_headings":"","what":"General Notes","title":"Version 1.1.0","text":"Minor updates wording formatting Corrections Gene Calling Annotation page Tutorial section Alignment-Free Analysis removed (readded later figure put )","code":""},{"path":[]},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/news/index.html","id":"general-notes-1-0-0","dir":"Changelog","previous_headings":"","what":"General Notes","title":"Version 1.0.0","text":"tutorials now complete dataset code!","code":""},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/news/index.html","id":"future-work-1-0-0","dir":"Changelog","previous_headings":"","what":"Future Work","title":"Version 1.0.0","text":"Datasets updated prior conference consistency Language/explanations updated May include photo downloading dataset FindingCOGs page","code":""},{"path":[]},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/news/index.html","id":"general-notes-0-7-0","dir":"Changelog","previous_headings":"","what":"General Notes","title":"Version 0.7.0","text":"Adds download button Setup page datafiles Minor formatting fixes adjustments Examples TreeLine now use correct version","code":""},{"path":[]},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/news/index.html","id":"general-notes-0-6-0","dir":"Changelog","previous_headings":"","what":"General Notes","title":"Version 0.6.0","text":"Updates GeneCallingAnnotation rough draft code Adds new datafiles use tutorials","code":""},{"path":[]},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/news/index.html","id":"general-notes-0-5-0","dir":"Changelog","previous_headings":"","what":"General Notes","title":"Version 0.5.0","text":"Updates LoadingGenomeData code Updates ConstructingPhylogenies code Updates CoevolutionNetworks code","code":""},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/news/index.html","id":"known-issues-0-5-0","dir":"Changelog","previous_headings":"","what":"Known Issues","title":"Version 0.5.0","text":"Data used code examples neither consisent final Several tutorials still missing code","code":""},{"path":[]},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/news/index.html","id":"bugfixes-0-4-0","dir":"Changelog","previous_headings":"","what":"Bugfixes","title":"Version 0.4.0","text":"Updated text support pkgdown automatic reference linking Minor updates README","code":""},{"path":[]},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/news/index.html","id":"general-notes-0-3-0","dir":"Changelog","previous_headings":"","what":"General Notes","title":"Version 0.3.0","text":"Updated tutorials topics covered final product","code":""},{"path":[]},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/news/index.html","id":"bugfixes-0-2-0","dir":"Changelog","previous_headings":"","what":"Bugfixes","title":"Version 0.2.0","text":"Changes fix display buttons pagination","code":""},{"path":[]},{"path":"https://www.ahl27.com/CompGenomicsBioc2022/news/index.html","id":"general-notes-0-1-0","dir":"Changelog","previous_headings":"","what":"General Notes","title":"Version 0.1.0","text":"Initialization package Creation several empty files mockup final layout","code":""}]
